"""
Day 1 课堂演示代码 - BMI计算器(身体质量指数)
主题: 综合应用 - 输入、计算、输出、格式化
适合: Day1收尾案例，展示完整程序结构
"""

# ============================================================
# 程序说明
# ============================================================
"""
BMI(Body Mass Index 身体质量指数)
计算公式: BMI = 体重(kg) / 身高(m)²

BMI标准(中国标准):
- BMI < 18.5: 偏瘦
- 18.5 <= BMI < 24: 正常
- 24 <= BMI < 28: 偏胖
- BMI >= 28: 肥胖

注意: 本程序为教学示例，实际健康评估请咨询专业医生
"""

# ============================================================
# 第一部分: 基础版 - 简单计算BMI
# ============================================================

# ============ 知识点 ============
# 1. 多步骤计算
# 2. 单位换算(cm转m)
# 3. 平方运算(**)
# 4. 格式化输出

# ============ 实战技巧 ============
# 1. 用户习惯输入厘米，程序内部转换为米
# 2. 中间结果保存到变量，便于调试
# 3. 输出时保留2位小数，更专业

# ============ 易错点 ============
# 1. 身高单位要统一为米
# 2. 身高的平方: height ** 2 或 height * height
# 3. 除法运算确保分母不为0

# ============ 扩展思考 ============
# 1. 如何判断BMI属于哪个范围?
# 2. 如何让输出更美观?
# 3. 能否提供健康建议?

print("="*60)
print("BMI计算器 v1.0 - 基础版")
print("="*60)

# 获取用户输入
name = input("\n请输入你的名字: ")
height_cm = float(input("请输入你的身高(厘米): "))
weight = float(input("请输入你的体重(公斤): "))

# 单位转换: 厘米转米
height_m = height_cm / 100

# 计算BMI
bmi = weight / (height_m ** 2)

# 输出结果
print("\n" + "-"*60)
print(f"{name}的BMI计算结果:")
print(f"身高: {height_cm} cm ({height_m} m)")
print(f"体重: {weight} kg")
print(f"BMI指数: {bmi:.2f}")
print("-"*60)


# ============================================================
# 第二部分: 改进版 - 添加健康评估
# ============================================================

# ============ 知识点 ============
# 1. 条件判断(if-elif-else)
# 2. 比较运算符(>, <, >=, <=)
# 3. 逻辑判断

# ============ 实战技巧 ============
# 1. 从小到大排列条件
# 2. 使用elif避免重复判断
# 3. 最后用else兜底

# ============ 易错点 ============
# 1. 边界值要清楚: 18.5算偏瘦还是正常?
# 2. 条件的顺序很重要
# 3. 每个if后面要有冒号:

# ============ 扩展思考 ============
# 1. 不同年龄BMI标准不同，如何实现?
# 2. 如何用颜色区分不同等级?
# 3. 能否给出改善建议?

print("\n" + "="*60)
print("BMI计算器 v2.0 - 健康评估版")
print("="*60)

# 获取用户信息
name = input("\n请输入你的名字: ")
age = int(input("请输入你的年龄: "))
height_cm = float(input("请输入你的身高(厘米): "))
weight = float(input("请输入你的体重(公斤): "))

# 计算BMI
height_m = height_cm / 100
bmi = weight / (height_m ** 2)

# 健康评估
if bmi < 18.5:
    status = "偏瘦"
    advice = "建议适当增加营养摄入，注意饮食均衡"
elif bmi < 24:
    status = "正常"
    advice = "体重正常，继续保持良好的生活习惯"
elif bmi < 28:
    status = "偏胖"
    advice = "建议适当控制饮食，增加运动量"
else:
    status = "肥胖"
    advice = "建议咨询专业医生，制定科学的减重计划"

# 输出详细报告
print("\n" + "="*60)
print("健康评估报告")
print("="*60)
print(f"姓名: {name}")
print(f"年龄: {age}岁")
print(f"身高: {height_cm} cm")
print(f"体重: {weight} kg")
print(f"BMI指数: {bmi:.2f}")
print(f"健康状况: {status}")
print(f"健康建议: {advice}")
print("="*60)


# ============================================================
# 第三部分: 专业版 - 完整的健康管理系统
# ============================================================

# ============ 知识点 ============
# 1. 标准体重计算
# 2. 理想BMI范围
# 3. 目标体重建议

# ============ 实战技巧 ============
# 1. 提供多维度的健康指标
# 2. 给出具体的数值建议
# 3. 使用表格形式展示对比

# ============ 易错点 ============
# 1. 计算标准体重有多种公式
# 2. 理想体重范围需要根据身高计算
# 3. 输出格式要对齐

# ============ 扩展思考 ============
# 1. 如何保存历史记录追踪变化?
# 2. 如何绘制BMI变化曲线?
# 3. 如何连接智能设备自动获取数据?

print("\n" + "="*60)
print("BMI计算器 v3.0 - 专业健康管理版")
print("="*60)

# 获取用户完整信息
print("\n请输入基本信息:")
name = input("  姓名: ")
age = int(input("  年龄: "))
gender = input("  性别(男/女): ")
height_cm = float(input("  身高(厘米): "))
weight = float(input("  体重(公斤): "))

# 计算BMI
height_m = height_cm / 100
bmi = weight / (height_m ** 2)

# 计算标准体重(简化公式)
if gender == "男":
    standard_weight = (height_cm - 80) * 0.7
else:
    standard_weight = (height_cm - 70) * 0.6

# 计算理想体重范围(BMI 18.5-24)
ideal_weight_min = 18.5 * (height_m ** 2)
ideal_weight_max = 24 * (height_m ** 2)

# 计算体重差异
weight_diff = weight - standard_weight

# 健康评估
if bmi < 18.5:
    status = "偏瘦"
    level = "★☆☆☆☆"
    advice = "适当增加营养摄入"
elif bmi < 24:
    status = "正常"
    level = "★★★★★"
    advice = "保持当前状态"
elif bmi < 28:
    status = "偏胖"
    level = "★★★☆☆"
    advice = "适当控制饮食和运动"
else:
    status = "肥胖"
    level = "★★☆☆☆"
    advice = "建议咨询专业医生"

# 输出专业报告
print("\n" + "="*60)
print(" "*20 + "健康评估报告")
print("="*60)

# 基本信息
print("\n【基本信息】")
print(f"  姓名: {name:<10} 年龄: {age}岁")
print(f"  性别: {gender:<10} 身高: {height_cm} cm")
print(f"  体重: {weight} kg")

# BMI分析
print("\n【BMI分析】")
print(f"  BMI指数: {bmi:.2f}")
print(f"  健康状况: {status} {level}")
print(f"  健康建议: {advice}")

# 标准对比
print("\n【标准对比】")
print(f"  标准体重: {standard_weight:.1f} kg")
print(f"  当前差异: {weight_diff:+.1f} kg", end="")
if weight_diff > 0:
    print(" (超重)")
elif weight_diff < 0:
    print(" (偏轻)")
else:
    print(" (标准)")

# 理想范围
print(f"  理想范围: {ideal_weight_min:.1f} - {ideal_weight_max:.1f} kg")

# BMI标准表
print("\n【BMI标准参考表】")
print("  BMI < 18.5       : 偏瘦")
print("  18.5 ≤ BMI < 24  : 正常 ★★★★★")
print("  24 ≤ BMI < 28    : 偏胖")
print("  BMI ≥ 28         : 肥胖")

# 目标建议
print("\n【健康目标建议】")
if bmi < 18.5:
    target_weight = ideal_weight_min
    target_diff = target_weight - weight
    print(f"  建议目标: 增重至 {target_weight:.1f} kg")
    print(f"  需要增加: {target_diff:.1f} kg")
    print(f"  建议周期: {abs(target_diff/0.5):.0f} 周(每周增重0.5kg)")
elif bmi >= 24:
    target_weight = ideal_weight_max
    target_diff = weight - target_weight
    print(f"  建议目标: 减重至 {target_weight:.1f} kg")
    print(f"  需要减少: {target_diff:.1f} kg")
    print(f"  建议周期: {abs(target_diff/0.5):.0f} 周(每周减重0.5kg)")
else:
    print(f"  当前体重在健康范围内，继续保持!")

# 健康小贴士
print("\n【健康小贴士】")
print("  1. 保持规律作息，每天睡眠7-8小时")
print("  2. 均衡饮食，多吃蔬菜水果")
print("  3. 每周运动3-5次，每次30分钟以上")
print("  4. 定期体检，关注身体变化")
print("  5. 保持良好心态，避免压力过大")

print("\n" + "="*60)
print("感谢使用BMI健康管理系统!")
print("祝您身体健康！")
print("="*60)


# ============================================================
# 课后练习题
# ============================================================
"""
基础练习:
1. 修改程序，支持英制单位输入(英寸、磅)
   1英寸 = 2.54厘米
   1磅 = 0.4536公斤

2. 添加腰围输入，计算腰臀比
   腰臀比 = 腰围 / 臀围
   男性标准: < 0.9
   女性标准: < 0.85

3. 计算基础代谢率(BMR)
   男性: 10 × 体重 + 6.25 × 身高 - 5 × 年龄 + 5
   女性: 10 × 体重 + 6.25 × 身高 - 5 × 年龄 - 161

进阶练习:
4. 实现多人BMI对比功能
   输入多个人的信息，输出排名和对比

5. 添加数据保存功能
   将计算结果保存到文件，支持查看历史记录

6. 制作BMI计算器网页版
   使用HTML + Python后端实现

挑战练习:
7. 开发完整的健康管理App
   - 记录每日体重变化
   - 绘制体重曲线图
   - 提供个性化饮食建议
   - 生成运动计划
   - 设置目标提醒

8. AI健康助手
   - 集成大模型API
   - 根据用户数据生成个性化建议
   - 智能问答健康问题
"""

# ============================================================
# 知识点总结
# ============================================================
"""
今天学习的内容:
1. ✓ Python基础语法
2. ✓ 变量和数据类型
3. ✓ 用户输入输出
4. ✓ 算术运算
5. ✓ 类型转换
6. ✓ 格式化输出
7. ✓ 条件判断(预告)

下节预告:
- 字符串的更多操作
- 列表和数据存储
- 更复杂的条件判断
- 循环语句

学习建议:
1. 多敲代码，不要只看
2. 尝试修改代码，观察结果变化
3. 完成所有课后练习
4. 遇到问题先思考，再查资料
5. 与同学交流讨论

编程能力 = 理论知识 × 实践时间 × 思考深度
"""
