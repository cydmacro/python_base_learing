"""
Day 1 课堂演示代码 - 简单计算器
主题: 用户输入 + 算术运算 + 类型转换
适合: 学习完变量和数据类型后
"""

# ============================================================
# 第一部分: 用户输入 - 与程序交互
# ============================================================

# ============ 知识点 ============
# 1. input()函数: 获取用户输入
# 2. input()返回的是字符串类型
# 3. 需要转换为数字才能计算

# ============ 实战技巧 ============
# 1. input()中可以添加提示文字
# 2. 提示文字要清晰明了
# 3. 立即转换类型可以减少后续麻烦

# ============ 易错点 ============
# 1. 忘记input()返回的是字符串
# 2. 直接用字符串进行数学运算会报错
# 3. 转换类型时可能因为用户输入错误而崩溃

# ============ 扩展思考 ============
# 1. 如何处理用户输入错误的情况?
# 2. 能否限制用户只能输入数字?
# 3. 如何让提示更友好?

print("="*50)
print("欢迎使用简单计算器 v1.0")
print("="*50)

# 获取用户输入
name = input("请输入你的名字: ")
print(f"你好，{name}!")

# 输入第一个数字
num1_str = input("请输入第一个数字: ")
print(f"你输入的是: {num1_str} (类型: {type(num1_str)})")

# 转换为浮点数(支持小数)
num1 = float(num1_str)
print(f"转换后: {num1} (类型: {type(num1)})")


# ============================================================
# 第二部分: 四则运算 - 基本算术操作
# ============================================================

# ============ 知识点 ============
# 1. 加法: +
# 2. 减法: -
# 3. 乘法: *
# 4. 除法: /

# ============ 实战技巧 ============
# 1. 除法结果总是浮点数
# 2. 整除(去掉小数): //
# 3. 取余(求余数): %
# 4. 幂运算(乘方): **

# ============ 易错点 ============
# 1. 除数为0会导致程序崩溃
# 2. 运算符优先级: 先乘除后加减
# 3. 整数除法//会向下取整

# ============ 扩展思考 ============
# 1. 如何实现更复杂的数学运算?
# 2. 运算顺序如何控制?
# 3. 如何保留指定的小数位数?

print("\n" + "-"*50)
print("Python运算符演示")
print("-"*50)

a = 10
b = 3

print(f"数字a = {a}, 数字b = {b}")
print(f"加法: {a} + {b} = {a + b}")
print(f"减法: {a} - {b} = {a - b}")
print(f"乘法: {a} * {b} = {a * b}")
print(f"除法: {a} / {b} = {a / b}")
print(f"整除: {a} // {b} = {a // b}")
print(f"取余: {a} % {b} = {a % b}")
print(f"幂运算: {a} ** {b} = {a ** b}")


# ============================================================
# 第三部分: 完整计算器 - 两数四则运算
# ============================================================

# ============ 知识点 ============
# 1. 综合使用input()和运算符
# 2. 格式化输出结果
# 3. 保留小数位数

# ============ 实战技巧 ============
# 1. 一步到位转换类型: int(input())
# 2. f-string格式化: {value:.2f}保留2位小数
# 3. 清晰的输出格式让结果易读

# ============ 易错点 ============
# 1. 用户可能输入非数字内容
# 2. 除法时除数可能为0
# 3. 整数运算可能得到浮点数

# ============ 扩展思考 ============
# 1. 如何让用户选择运算类型?
# 2. 如何支持连续运算?
# 3. 如何添加历史记录功能?

print("\n" + "="*50)
print("两数四则运算计算器")
print("="*50)

# 方式1: 分步转换
print("\n【方式1: 分步转换】")
input1 = input("请输入第一个数字: ")
num1 = float(input1)

input2 = input("请输入第二个数字: ")
num2 = float(input2)

# 方式2: 一步到位(推荐)
print("\n【方式2: 一步到位】")
num1 = float(input("请输入第一个数字: "))
num2 = float(input("请输入第二个数字: "))

# 进行所有运算
add_result = num1 + num2
sub_result = num1 - num2
mul_result = num1 * num2
div_result = num1 / num2 if num2 != 0 else "除数不能为0"

# 输出结果
print("\n" + "-"*50)
print("计算结果:")
print("-"*50)
print(f"{num1} + {num2} = {add_result}")
print(f"{num1} - {num2} = {sub_result}")
print(f"{num1} × {num2} = {mul_result}")
print(f"{num1} ÷ {num2} = {div_result}")

# 格式化输出(保留2位小数)
print("\n【保留2位小数】")
if isinstance(div_result, float):
    print(f"{num1:.2f} + {num2:.2f} = {add_result:.2f}")
    print(f"{num1:.2f} - {num2:.2f} = {sub_result:.2f}")
    print(f"{num1:.2f} × {num2:.2f} = {mul_result:.2f}")
    print(f"{num1:.2f} ÷ {num2:.2f} = {div_result:.2f}")


# ============================================================
# 第四部分: 进阶计算器 - 用户选择运算类型
# ============================================================

# ============ 知识点 ============
# 1. 条件判断预告(if语句)
# 2. 字符串比较
# 3. 程序流程控制

# ============ 实战技巧 ============
# 1. 提供清晰的操作菜单
# 2. 使用简单的符号表示操作
# 3. 给出明确的输出格式

# ============ 易错点 ============
# 1. 字符串比较区分大小写
# 2. 用户输入可能有空格
# 3. 未处理无效输入

# ============ 扩展思考 ============
# 1. 如何添加更多运算类型?
# 2. 如何支持多个数字运算?
# 3. 如何实现计算器的循环使用?

print("\n" + "="*50)
print("智能计算器 - 选择运算类型")
print("="*50)

# 显示菜单
print("\n请选择运算类型:")
print("1. 加法 (+)")
print("2. 减法 (-)")
print("3. 乘法 (*)")
print("4. 除法 (/)")

# 获取用户选择
choice = input("\n请输入选择 (1/2/3/4): ")

# 获取数字
num1 = float(input("请输入第一个数字: "))
num2 = float(input("请输入第二个数字: "))

# 根据选择执行运算
print("\n" + "-"*50)
if choice == '1':
    result = num1 + num2
    symbol = '+'
elif choice == '2':
    result = num1 - num2
    symbol = '-'
elif choice == '3':
    result = num1 * num2
    symbol = '×'
elif choice == '4':
    if num2 != 0:
        result = num1 / num2
        symbol = '÷'
    else:
        result = "错误"
        symbol = '÷'
        print("错误: 除数不能为0!")
else:
    result = "无效"
    symbol = '?'
    print("错误: 无效的选择!")

# 输出结果
if result != "错误" and result != "无效":
    print(f"计算结果: {num1} {symbol} {num2} = {result:.2f}")

print("-"*50)


# ============================================================
# 第五部分: 实用小工具 - 常用计算
# ============================================================

# ============ 知识点 ============
# 1. 数学公式的实现
# 2. 多个输入的处理
# 3. 实际应用场景

# ============ 实战技巧 ============
# 1. 将复杂公式拆分为简单步骤
# 2. 使用有意义的变量名
# 3. 添加单位让结果更清晰

# ============ 易错点 ============
# 1. 公式中运算符优先级
# 2. 单位换算要正确
# 3. 注意数据类型

# ============ 扩展思考 ============
# 1. 如何封装成函数?
# 2. 如何添加输入验证?
# 3. 如何保存计算历史?

print("\n" + "="*50)
print("实用计算工具集")
print("="*50)

# 1. 平均分计算
print("\n【工具1: 平均分计算器】")
score1 = float(input("请输入第1门课成绩: "))
score2 = float(input("请输入第2门课成绩: "))
score3 = float(input("请输入第3门课成绩: "))

average = (score1 + score2 + score3) / 3
print(f"三门课平均分: {average:.2f}")

# 2. 温度转换
print("\n【工具2: 摄氏度转华氏度】")
celsius = float(input("请输入摄氏度: "))
fahrenheit = celsius * 9/5 + 32
print(f"{celsius}°C = {fahrenheit:.2f}°F")

# 3. 圆的面积和周长
print("\n【工具3: 圆的面积和周长】")
radius = float(input("请输入圆的半径: "))
pi = 3.14159

area = pi * radius ** 2
circumference = 2 * pi * radius

print(f"半径为 {radius} 的圆:")
print(f"  面积 = {area:.2f}")
print(f"  周长 = {circumference:.2f}")


# ============================================================
# 课后练习题
# ============================================================
"""
基础题:
1. 编写程序计算矩形的面积(输入长和宽)
2. 计算三个数的和与平均值
3. 华氏度转摄氏度: C = (F - 32) × 5/9
4. 计算购物总价(输入单价和数量)

进阶题:
5. 时间换算: 输入秒数，转换为时分秒格式
   例如: 3665秒 = 1小时1分5秒
   提示: 使用//和%运算符

6. 折扣计算器: 输入原价和折扣率，计算折后价
   例如: 原价100元，8折 = 80元
   提示: 折后价 = 原价 × 折扣率 / 10

7. BMI计算器(在下一个文件中实现)

挑战题:
8. 复利计算器: 计算投资收益
   公式: 最终金额 = 本金 × (1 + 利率) ** 年数

9. 等差数列求和: 输入首项、末项、项数
   公式: 和 = (首项 + 末项) × 项数 / 2

10. 实现一个可以连续计算的计算器
    用户可以一直输入，直到输入'q'退出
"""

print("\n" + "="*50)
print("计算器演示结束")
print("请尝试完成课后练习题!")
print("="*50)
